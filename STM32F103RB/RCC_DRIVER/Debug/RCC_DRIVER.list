
RCC_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004d4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000604  08000604  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000604  08000604  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000604  08000604  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000604  08000604  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000604  08000604  00001604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000608  08000608  00001608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800060c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000610  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000610  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004e9  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a1  00000000  00000000  00002516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000026b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000054  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b4b  00000000  00000000  00002784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000927  00000000  00000000  000042cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007a81  00000000  00000000  00004bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000c677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000138  00000000  00000000  0000c6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0000c7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080005ec 	.word	0x080005ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080005ec 	.word	0x080005ec

08000170 <Rcc_setClkSts>:

volatile ErrorCode errorFlag = ERROR_NONE;
volatile int ERROR_STATE = 0;

//Enabling clocks
void Rcc_setClkSts(enum clockType clktype, enum Status status) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	4613      	mov	r3, r2
 800017e:	71bb      	strb	r3, [r7, #6]
    uint32_t counter = 0;
 8000180:	2300      	movs	r3, #0
 8000182:	60fb      	str	r3, [r7, #12]
    const uint32_t timeout = 10000;
 8000184:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000188:	60bb      	str	r3, [r7, #8]
    switch (clktype) {
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	2b02      	cmp	r3, #2
 800018e:	f000 80d2 	beq.w	8000336 <Rcc_setClkSts+0x1c6>
 8000192:	2b02      	cmp	r3, #2
 8000194:	f300 8136 	bgt.w	8000404 <Rcc_setClkSts+0x294>
 8000198:	2b00      	cmp	r3, #0
 800019a:	d002      	beq.n	80001a2 <Rcc_setClkSts+0x32>
 800019c:	2b01      	cmp	r3, #1
 800019e:	d062      	beq.n	8000266 <Rcc_setClkSts+0xf6>
 80001a0:	e130      	b.n	8000404 <Rcc_setClkSts+0x294>
        case HSI:
            if (status == on) {
 80001a2:	79bb      	ldrb	r3, [r7, #6]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d123      	bne.n	80001f0 <Rcc_setClkSts+0x80>
                SET_BIT(RCC->RCC_CR, HSION); // Enable HSI clock
 80001a8:	4b8c      	ldr	r3, [pc, #560]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	681a      	ldr	r2, [r3, #0]
 80001ae:	4b8b      	ldr	r3, [pc, #556]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f042 0201 	orr.w	r2, r2, #1
 80001b6:	601a      	str	r2, [r3, #0]

                while (!(READ_BIT(RCC->RCC_CR, HSIRDY))) {
 80001b8:	e012      	b.n	80001e0 <Rcc_setClkSts+0x70>
                    counter++;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	3301      	adds	r3, #1
 80001be:	60fb      	str	r3, [r7, #12]
                    if (counter >= timeout) {
 80001c0:	68fa      	ldr	r2, [r7, #12]
 80001c2:	68bb      	ldr	r3, [r7, #8]
 80001c4:	429a      	cmp	r2, r3
 80001c6:	d30b      	bcc.n	80001e0 <Rcc_setClkSts+0x70>
                        ERROR_STATE = -1;
 80001c8:	4b85      	ldr	r3, [pc, #532]	@ (80003e0 <Rcc_setClkSts+0x270>)
 80001ca:	f04f 32ff 	mov.w	r2, #4294967295
 80001ce:	601a      	str	r2, [r3, #0]
                        errorsHandling(ERROR_STATE);
 80001d0:	4b83      	ldr	r3, [pc, #524]	@ (80003e0 <Rcc_setClkSts+0x270>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 f982 	bl	80004e0 <errorsHandling>
                        break;
 80001dc:	bf00      	nop
                        }
                    }
                }
                CLR_BIT(RCC->RCC_CR, HSION); // Disable HSI clock
            }
            break;
 80001de:	e11c      	b.n	800041a <Rcc_setClkSts+0x2aa>
                while (!(READ_BIT(RCC->RCC_CR, HSIRDY))) {
 80001e0:	4b7e      	ldr	r3, [pc, #504]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f003 0302 	and.w	r3, r3, #2
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d0e5      	beq.n	80001ba <Rcc_setClkSts+0x4a>
            break;
 80001ee:	e114      	b.n	800041a <Rcc_setClkSts+0x2aa>
                if (RCC_CFGR_SWS0 == 0 && RCC_CFGR_SWS1 == 0) {
 80001f0:	4b7a      	ldr	r3, [pc, #488]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	f003 0304 	and.w	r3, r3, #4
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d12a      	bne.n	8000254 <Rcc_setClkSts+0xe4>
 80001fe:	4b77      	ldr	r3, [pc, #476]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	f003 0308 	and.w	r3, r3, #8
 8000208:	2b00      	cmp	r3, #0
 800020a:	d123      	bne.n	8000254 <Rcc_setClkSts+0xe4>
                    SET_BIT(RCC->RCC_CFGR, SW0);
 800020c:	4b73      	ldr	r3, [pc, #460]	@ (80003dc <Rcc_setClkSts+0x26c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	685a      	ldr	r2, [r3, #4]
 8000212:	4b72      	ldr	r3, [pc, #456]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f042 0201 	orr.w	r2, r2, #1
 800021a:	605a      	str	r2, [r3, #4]
                    CLR_BIT(RCC->RCC_CFGR, SW1);
 800021c:	4b6f      	ldr	r3, [pc, #444]	@ (80003dc <Rcc_setClkSts+0x26c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	685a      	ldr	r2, [r3, #4]
 8000222:	4b6e      	ldr	r3, [pc, #440]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f022 0202 	bic.w	r2, r2, #2
 800022a:	605a      	str	r2, [r3, #4]
                    while (!(READ_BIT(RCC->RCC_CR, HSERDY))) {
 800022c:	e00b      	b.n	8000246 <Rcc_setClkSts+0xd6>
                        counter++;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	3301      	adds	r3, #1
 8000232:	60fb      	str	r3, [r7, #12]
                        if (counter >= timeout) {
 8000234:	68fa      	ldr	r2, [r7, #12]
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	429a      	cmp	r2, r3
 800023a:	d304      	bcc.n	8000246 <Rcc_setClkSts+0xd6>
                            ERROR_STATE = -1;
 800023c:	4b68      	ldr	r3, [pc, #416]	@ (80003e0 <Rcc_setClkSts+0x270>)
 800023e:	f04f 32ff 	mov.w	r2, #4294967295
 8000242:	601a      	str	r2, [r3, #0]
                            break;
 8000244:	e006      	b.n	8000254 <Rcc_setClkSts+0xe4>
                    while (!(READ_BIT(RCC->RCC_CR, HSERDY))) {
 8000246:	4b65      	ldr	r3, [pc, #404]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0ec      	beq.n	800022e <Rcc_setClkSts+0xbe>
                CLR_BIT(RCC->RCC_CR, HSION); // Disable HSI clock
 8000254:	4b61      	ldr	r3, [pc, #388]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b60      	ldr	r3, [pc, #384]	@ (80003dc <Rcc_setClkSts+0x26c>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f022 0201 	bic.w	r2, r2, #1
 8000262:	601a      	str	r2, [r3, #0]
            break;
 8000264:	e0d9      	b.n	800041a <Rcc_setClkSts+0x2aa>

        case HSE:
            if (status == on) {
 8000266:	79bb      	ldrb	r3, [r7, #6]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d123      	bne.n	80002b4 <Rcc_setClkSts+0x144>
                SET_BIT(RCC->RCC_CR, HSEON); // Enable HSE clock
 800026c:	4b5b      	ldr	r3, [pc, #364]	@ (80003dc <Rcc_setClkSts+0x26c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	4b5a      	ldr	r3, [pc, #360]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800027a:	601a      	str	r2, [r3, #0]

                while (!READ_BIT(RCC->RCC_CR, HSERDY)) {
 800027c:	e012      	b.n	80002a4 <Rcc_setClkSts+0x134>
                    counter++;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	3301      	adds	r3, #1
 8000282:	60fb      	str	r3, [r7, #12]
                    if (counter >= timeout) {
 8000284:	68fa      	ldr	r2, [r7, #12]
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	429a      	cmp	r2, r3
 800028a:	d30b      	bcc.n	80002a4 <Rcc_setClkSts+0x134>
                        ERROR_STATE = -1;
 800028c:	4b54      	ldr	r3, [pc, #336]	@ (80003e0 <Rcc_setClkSts+0x270>)
 800028e:	f04f 32ff 	mov.w	r2, #4294967295
 8000292:	601a      	str	r2, [r3, #0]
                        errorsHandling(ERROR_STATE);
 8000294:	4b52      	ldr	r3, [pc, #328]	@ (80003e0 <Rcc_setClkSts+0x270>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	b2db      	uxtb	r3, r3
 800029a:	4618      	mov	r0, r3
 800029c:	f000 f920 	bl	80004e0 <errorsHandling>
                        break;
 80002a0:	bf00      	nop
                        }
                    }
                }
                CLR_BIT(RCC->RCC_CR, HSEON); // Disable HSE clock
            }
            break;
 80002a2:	e0ba      	b.n	800041a <Rcc_setClkSts+0x2aa>
                while (!READ_BIT(RCC->RCC_CR, HSERDY)) {
 80002a4:	4b4d      	ldr	r3, [pc, #308]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0e5      	beq.n	800027e <Rcc_setClkSts+0x10e>
            break;
 80002b2:	e0b2      	b.n	800041a <Rcc_setClkSts+0x2aa>
                if(RCC_CFGR_SWS0 == 0 && RCC_CFGR_SWS1 == 1) {
 80002b4:	4b49      	ldr	r3, [pc, #292]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	f003 0304 	and.w	r3, r3, #4
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d130      	bne.n	8000324 <Rcc_setClkSts+0x1b4>
 80002c2:	4b46      	ldr	r3, [pc, #280]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	f003 0308 	and.w	r3, r3, #8
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d029      	beq.n	8000324 <Rcc_setClkSts+0x1b4>
                    CLR_BIT(RCC->RCC_CFGR, SW0);
 80002d0:	4b42      	ldr	r3, [pc, #264]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	685a      	ldr	r2, [r3, #4]
 80002d6:	4b41      	ldr	r3, [pc, #260]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f022 0201 	bic.w	r2, r2, #1
 80002de:	605a      	str	r2, [r3, #4]
                    CLR_BIT(RCC->RCC_CFGR, SW1);
 80002e0:	4b3e      	ldr	r3, [pc, #248]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	685a      	ldr	r2, [r3, #4]
 80002e6:	4b3d      	ldr	r3, [pc, #244]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f022 0202 	bic.w	r2, r2, #2
 80002ee:	605a      	str	r2, [r3, #4]
                    while (!(READ_BIT(RCC->RCC_CR, HSIRDY))) {
 80002f0:	e011      	b.n	8000316 <Rcc_setClkSts+0x1a6>
                        counter++;
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	3301      	adds	r3, #1
 80002f6:	60fb      	str	r3, [r7, #12]
                        if (counter >= timeout){
 80002f8:	68fa      	ldr	r2, [r7, #12]
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d30a      	bcc.n	8000316 <Rcc_setClkSts+0x1a6>
                            ERROR_STATE = -1;
 8000300:	4b37      	ldr	r3, [pc, #220]	@ (80003e0 <Rcc_setClkSts+0x270>)
 8000302:	f04f 32ff 	mov.w	r2, #4294967295
 8000306:	601a      	str	r2, [r3, #0]
                            errorsHandling(ERROR_STATE);
 8000308:	4b35      	ldr	r3, [pc, #212]	@ (80003e0 <Rcc_setClkSts+0x270>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f8e6 	bl	80004e0 <errorsHandling>
                            break;
 8000314:	e006      	b.n	8000324 <Rcc_setClkSts+0x1b4>
                    while (!(READ_BIT(RCC->RCC_CR, HSIRDY))) {
 8000316:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f003 0302 	and.w	r3, r3, #2
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0e6      	beq.n	80002f2 <Rcc_setClkSts+0x182>
                CLR_BIT(RCC->RCC_CR, HSEON); // Disable HSE clock
 8000324:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4b2c      	ldr	r3, [pc, #176]	@ (80003dc <Rcc_setClkSts+0x26c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000332:	601a      	str	r2, [r3, #0]
            break;
 8000334:	e071      	b.n	800041a <Rcc_setClkSts+0x2aa>

        case PLL:
            if (status == on) {
 8000336:	79bb      	ldrb	r3, [r7, #6]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d123      	bne.n	8000384 <Rcc_setClkSts+0x214>
                SET_BIT(RCC->RCC_CR, PLLON); // Enable PLL clock
 800033c:	4b27      	ldr	r3, [pc, #156]	@ (80003dc <Rcc_setClkSts+0x26c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	4b26      	ldr	r3, [pc, #152]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800034a:	601a      	str	r2, [r3, #0]

                while (!(READ_BIT(RCC->RCC_CR, PLLRDY))) {
 800034c:	e012      	b.n	8000374 <Rcc_setClkSts+0x204>
                    counter++;
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	3301      	adds	r3, #1
 8000352:	60fb      	str	r3, [r7, #12]
                    if (counter >= timeout) {
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	429a      	cmp	r2, r3
 800035a:	d30b      	bcc.n	8000374 <Rcc_setClkSts+0x204>
                        ERROR_STATE = -1;
 800035c:	4b20      	ldr	r3, [pc, #128]	@ (80003e0 <Rcc_setClkSts+0x270>)
 800035e:	f04f 32ff 	mov.w	r2, #4294967295
 8000362:	601a      	str	r2, [r3, #0]
                        errorsHandling(ERROR_STATE);
 8000364:	4b1e      	ldr	r3, [pc, #120]	@ (80003e0 <Rcc_setClkSts+0x270>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	b2db      	uxtb	r3, r3
 800036a:	4618      	mov	r0, r3
 800036c:	f000 f8b8 	bl	80004e0 <errorsHandling>
                        break;
 8000370:	bf00      	nop
                        }
                    }
                }
                CLR_BIT(RCC->RCC_CR, PLLON);// Disable PLL clock
            }
            break;
 8000372:	e052      	b.n	800041a <Rcc_setClkSts+0x2aa>
                while (!(READ_BIT(RCC->RCC_CR, PLLRDY))) {
 8000374:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0e5      	beq.n	800034e <Rcc_setClkSts+0x1de>
            break;
 8000382:	e04a      	b.n	800041a <Rcc_setClkSts+0x2aa>
              if (RCC_CFGR_SWS0 == 1 && RCC_CFGR_SWS1 == 0) {
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	f003 0304 	and.w	r3, r3, #4
 800038e:	2b00      	cmp	r3, #0
 8000390:	d02f      	beq.n	80003f2 <Rcc_setClkSts+0x282>
 8000392:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <Rcc_setClkSts+0x26c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d128      	bne.n	80003f2 <Rcc_setClkSts+0x282>
                    CLR_BIT(RCC->RCC_CFGR, SW0);
 80003a0:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	685a      	ldr	r2, [r3, #4]
 80003a6:	4b0d      	ldr	r3, [pc, #52]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f022 0201 	bic.w	r2, r2, #1
 80003ae:	605a      	str	r2, [r3, #4]
                    CLR_BIT(RCC->RCC_CFGR, SW1);
 80003b0:	4b0a      	ldr	r3, [pc, #40]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	685a      	ldr	r2, [r3, #4]
 80003b6:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <Rcc_setClkSts+0x26c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f022 0202 	bic.w	r2, r2, #2
 80003be:	605a      	str	r2, [r3, #4]
                    while (!(READ_BIT(RCC->RCC_CR, HSIRDY))) {
 80003c0:	e010      	b.n	80003e4 <Rcc_setClkSts+0x274>
                        counter++;
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	3301      	adds	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
                        if (counter >= timeout) {
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d309      	bcc.n	80003e4 <Rcc_setClkSts+0x274>
                            ERROR_STATE = -1;
 80003d0:	4b03      	ldr	r3, [pc, #12]	@ (80003e0 <Rcc_setClkSts+0x270>)
 80003d2:	f04f 32ff 	mov.w	r2, #4294967295
 80003d6:	601a      	str	r2, [r3, #0]
                            break;
 80003d8:	e00b      	b.n	80003f2 <Rcc_setClkSts+0x282>
 80003da:	bf00      	nop
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000024 	.word	0x20000024
                    while (!(READ_BIT(RCC->RCC_CR, HSIRDY))) {
 80003e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <Rcc_setClkSts+0x2b4>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f003 0302 	and.w	r3, r3, #2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0e7      	beq.n	80003c2 <Rcc_setClkSts+0x252>
                CLR_BIT(RCC->RCC_CR, PLLON);// Disable PLL clock
 80003f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <Rcc_setClkSts+0x2b4>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <Rcc_setClkSts+0x2b4>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8000400:	601a      	str	r2, [r3, #0]
            break;
 8000402:	e00a      	b.n	800041a <Rcc_setClkSts+0x2aa>

        default:
            ERROR_STATE = -2;
 8000404:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <Rcc_setClkSts+0x2b8>)
 8000406:	f06f 0201 	mvn.w	r2, #1
 800040a:	601a      	str	r2, [r3, #0]
            errorsHandling(ERROR_STATE);
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <Rcc_setClkSts+0x2b8>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f864 	bl	80004e0 <errorsHandling>
            break;
 8000418:	bf00      	nop
    }
}
 800041a:	bf00      	nop
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000000 	.word	0x20000000
 8000428:	20000024 	.word	0x20000024

0800042c <RCC_setSysClk>:

//Setting system's clock
void RCC_setSysClk(enum clockType clkType){
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
  switch(clkType){
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d028      	beq.n	800048e <RCC_setSysClk+0x62>
 800043c:	2b02      	cmp	r3, #2
 800043e:	dc37      	bgt.n	80004b0 <RCC_setSysClk+0x84>
 8000440:	2b00      	cmp	r3, #0
 8000442:	d002      	beq.n	800044a <RCC_setSysClk+0x1e>
 8000444:	2b01      	cmp	r3, #1
 8000446:	d011      	beq.n	800046c <RCC_setSysClk+0x40>
 8000448:	e032      	b.n	80004b0 <RCC_setSysClk+0x84>
    case HSI:
      CLR_BIT(RCC->RCC_CFGR, SW0);
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <RCC_setSysClk+0xa8>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	4b20      	ldr	r3, [pc, #128]	@ (80004d4 <RCC_setSysClk+0xa8>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f022 0201 	bic.w	r2, r2, #1
 8000458:	605a      	str	r2, [r3, #4]
      CLR_BIT(RCC->RCC_CFGR, SW1);
 800045a:	4b1e      	ldr	r3, [pc, #120]	@ (80004d4 <RCC_setSysClk+0xa8>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	685a      	ldr	r2, [r3, #4]
 8000460:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <RCC_setSysClk+0xa8>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f022 0202 	bic.w	r2, r2, #2
 8000468:	605a      	str	r2, [r3, #4]
    break;
 800046a:	e02c      	b.n	80004c6 <RCC_setSysClk+0x9a>

    case HSE:
      SET_BIT(RCC->RCC_CFGR, SW0);
 800046c:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <RCC_setSysClk+0xa8>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	685a      	ldr	r2, [r3, #4]
 8000472:	4b18      	ldr	r3, [pc, #96]	@ (80004d4 <RCC_setSysClk+0xa8>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f042 0201 	orr.w	r2, r2, #1
 800047a:	605a      	str	r2, [r3, #4]
      CLR_BIT(RCC->RCC_CFGR, SW1);
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <RCC_setSysClk+0xa8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	685a      	ldr	r2, [r3, #4]
 8000482:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <RCC_setSysClk+0xa8>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f022 0202 	bic.w	r2, r2, #2
 800048a:	605a      	str	r2, [r3, #4]
    break;
 800048c:	e01b      	b.n	80004c6 <RCC_setSysClk+0x9a>

    case PLL:
      CLR_BIT(RCC->RCC_CFGR, SW0);
 800048e:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <RCC_setSysClk+0xa8>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	685a      	ldr	r2, [r3, #4]
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <RCC_setSysClk+0xa8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f022 0201 	bic.w	r2, r2, #1
 800049c:	605a      	str	r2, [r3, #4]
      SET_BIT(RCC->RCC_CFGR, SW1);
 800049e:	4b0d      	ldr	r3, [pc, #52]	@ (80004d4 <RCC_setSysClk+0xa8>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	685a      	ldr	r2, [r3, #4]
 80004a4:	4b0b      	ldr	r3, [pc, #44]	@ (80004d4 <RCC_setSysClk+0xa8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f042 0202 	orr.w	r2, r2, #2
 80004ac:	605a      	str	r2, [r3, #4]
    break;
 80004ae:	e00a      	b.n	80004c6 <RCC_setSysClk+0x9a>

  default:
      ERROR_STATE = -2;
 80004b0:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <RCC_setSysClk+0xac>)
 80004b2:	f06f 0201 	mvn.w	r2, #1
 80004b6:	601a      	str	r2, [r3, #0]
      errorsHandling(ERROR_STATE);
 80004b8:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <RCC_setSysClk+0xac>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f80e 	bl	80004e0 <errorsHandling>
     break;
 80004c4:	bf00      	nop
  }
  errorFlag = ERROR_NONE;
 80004c6:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <RCC_setSysClk+0xb0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000024 	.word	0x20000024
 80004dc:	20000020 	.word	0x20000020

080004e0 <errorsHandling>:

    ERROR_STATE = 0; // No error
}

//Errors handling
void errorsHandling(ErrorCode error){
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]
  if(ERROR_STATE == -1){
 80004ea:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <errorsHandling+0x50>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004f2:	d103      	bne.n	80004fc <errorsHandling+0x1c>
      errorFlag = ERROR_TIMEOUT;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <errorsHandling+0x54>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
      errorFlag = ERROR_INVALID_PLLMUL_VALUE;
  }
  else{
      errorFlag = ERROR_NONE;
  }
}
 80004fa:	e014      	b.n	8000526 <errorsHandling+0x46>
  }else if(ERROR_STATE == -2){
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <errorsHandling+0x50>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f113 0f02 	cmn.w	r3, #2
 8000504:	d103      	bne.n	800050e <errorsHandling+0x2e>
      errorFlag = ERROR_INVALID_CLOCK_TYPE;
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <errorsHandling+0x54>)
 8000508:	2202      	movs	r2, #2
 800050a:	701a      	strb	r2, [r3, #0]
}
 800050c:	e00b      	b.n	8000526 <errorsHandling+0x46>
  }else if(ERROR_STATE == -3){
 800050e:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <errorsHandling+0x50>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f113 0f03 	cmn.w	r3, #3
 8000516:	d103      	bne.n	8000520 <errorsHandling+0x40>
      errorFlag = ERROR_INVALID_PLLMUL_VALUE;
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <errorsHandling+0x54>)
 800051a:	2203      	movs	r2, #3
 800051c:	701a      	strb	r2, [r3, #0]
}
 800051e:	e002      	b.n	8000526 <errorsHandling+0x46>
      errorFlag = ERROR_NONE;
 8000520:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <errorsHandling+0x54>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	20000024 	.word	0x20000024
 8000534:	20000020 	.word	0x20000020

08000538 <main>:
#include <stdint.h>
#include "RCC_DRIVER.h"
#include "RCC_DRIVER.C"

int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	Rcc_setClkSts(HSE,on);
 800053c:	2100      	movs	r1, #0
 800053e:	2001      	movs	r0, #1
 8000540:	f7ff fe16 	bl	8000170 <Rcc_setClkSts>
	RCC_setSysClk(HSE);
 8000544:	2001      	movs	r0, #1
 8000546:	f7ff ff71 	bl	800042c <RCC_setSysClk>

  for(;;);
 800054a:	bf00      	nop
 800054c:	e7fd      	b.n	800054a <main+0x12>
	...

08000550 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000550:	480d      	ldr	r0, [pc, #52]	@ (8000588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000552:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000554:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	@ (800058c <LoopForever+0x6>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	@ (8000590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	@ (8000594 <LoopForever+0xe>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	@ (8000598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	@ (800059c <LoopForever+0x16>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800057e:	f000 f811 	bl	80005a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff ffd9 	bl	8000538 <main>

08000586 <LoopForever>:

LoopForever:
  b LoopForever
 8000586:	e7fe      	b.n	8000586 <LoopForever>
  ldr   r0, =_estack
 8000588:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000594:	0800060c 	.word	0x0800060c
  ldr r2, =_sbss
 8000598:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800059c:	20000028 	.word	0x20000028

080005a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC1_2_IRQHandler>
	...

080005a4 <__libc_init_array>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	2600      	movs	r6, #0
 80005a8:	4d0c      	ldr	r5, [pc, #48]	@ (80005dc <__libc_init_array+0x38>)
 80005aa:	4c0d      	ldr	r4, [pc, #52]	@ (80005e0 <__libc_init_array+0x3c>)
 80005ac:	1b64      	subs	r4, r4, r5
 80005ae:	10a4      	asrs	r4, r4, #2
 80005b0:	42a6      	cmp	r6, r4
 80005b2:	d109      	bne.n	80005c8 <__libc_init_array+0x24>
 80005b4:	f000 f81a 	bl	80005ec <_init>
 80005b8:	2600      	movs	r6, #0
 80005ba:	4d0a      	ldr	r5, [pc, #40]	@ (80005e4 <__libc_init_array+0x40>)
 80005bc:	4c0a      	ldr	r4, [pc, #40]	@ (80005e8 <__libc_init_array+0x44>)
 80005be:	1b64      	subs	r4, r4, r5
 80005c0:	10a4      	asrs	r4, r4, #2
 80005c2:	42a6      	cmp	r6, r4
 80005c4:	d105      	bne.n	80005d2 <__libc_init_array+0x2e>
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005cc:	4798      	blx	r3
 80005ce:	3601      	adds	r6, #1
 80005d0:	e7ee      	b.n	80005b0 <__libc_init_array+0xc>
 80005d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d6:	4798      	blx	r3
 80005d8:	3601      	adds	r6, #1
 80005da:	e7f2      	b.n	80005c2 <__libc_init_array+0x1e>
 80005dc:	08000604 	.word	0x08000604
 80005e0:	08000604 	.word	0x08000604
 80005e4:	08000604 	.word	0x08000604
 80005e8:	08000608 	.word	0x08000608

080005ec <_init>:
 80005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ee:	bf00      	nop
 80005f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f2:	bc08      	pop	{r3}
 80005f4:	469e      	mov	lr, r3
 80005f6:	4770      	bx	lr

080005f8 <_fini>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	bf00      	nop
 80005fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fe:	bc08      	pop	{r3}
 8000600:	469e      	mov	lr, r3
 8000602:	4770      	bx	lr
